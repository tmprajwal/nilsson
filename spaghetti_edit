#!/usr/bin/python3

"""
Make a spaghetti plot.
"""

import os
import util,hamiltonian,high_level,states

def main():
  spaghetti({'n_max':6,'n_max_scale':6,'n_def':11,'delta_lo':0,'delta_hi':0.5,'fmt':"pdf",'kappa':0.0637,'mu':0.60,'e_lo':1,'e_hi':6.75})
  #stream = os.popen('wolframscript script.wls')
  #stream = os.popen('wolframscript script2.wls')

def spaghetti(pars):
  # Mandatory parameters are n_max,n_def,delta_lo,delta_hi,fmt.
  #   n_max = highest N shell to use in the basis for the calculation
  #   n_def = number of deformations
  #   delta_lo,delta_hi = low and high values of the delta parameter for deformation
  #   fmt can be "pdf" or "svg"
  #   kappa
  #   mu
  # Optional parameters:
  #   n_max_scale = highest major shell that appears on the energy axis; default is min(6,n_max)
  #   e_lo ... overrides other ways of setting the y scale
  #   e_hi
  pars['filename'] = "nilsson."+pars['fmt']
  r = spaghetti_r_code(pars)
  with open('temp.r', 'w') as f:
    f.write(r)
  os.system("R --quiet --slave --no-save --no-restore-data <temp.r")  
  #print("A spaghetti plot was written to "+pars['filename'])

def spaghetti_r_code(pars):
  n_max,n_def,delta_lo,delta_hi,fmt,filename = pars['n_max'],pars['n_def'],pars['delta_lo'],pars['delta_hi'],pars['fmt'],pars['filename'],
  ##
  f1=open("result.dat","w+")
  f2=open("result2.dat","w+")
  ##  
  if not ('n_max_scale' in pars):
    pars['n_max_scale'] = min(6,n_max)
  keys = []
  e = {} # energies
  vars = {} # variable names for lists
  defs = [] # list of deformations
  for k in range(n_def): # loop over deformations
    x = float(k)/float(n_def-1)
    delta = delta_lo+(delta_hi-delta_lo)*x
    defs.append(delta)
  print(defs)
  r = '' # generate R code
  r = r + fmt+'("'+filename+'")'+"\n"
  r = r + ("delta <-"+list_to_r_code(defs))+"\n"
  e_lo = 1.5 # can be overridden later by pars[]
  e_hi = 0.0 # can be overridden later by pars[]
  for omega in range(1,2*n_max+1,2):
    for parity in range(2):
      for k in range(n_def): # loop over deformations (minus 1)
        delta = defs[k]
        p = {'delta':delta}
        for par in ['mu','kappa']:
          if par in pars:
            p[par] = pars[par]
        result = high_level.do_nilsson(n_max,omega,parity,p)
        #sprint(result['states']," : ",result['evals'])
        f1.write(str(result['index']))
        f2.write(str(result['evals'])) #evals, evecs, n_states, ham, index
        n_states = result['n_states']
        #sprint(n_states)
        for i in range(n_states):
          key = (omega,parity,i)
          var = "e"+str(omega)+"_"+str(parity)+"_"+str(i)
          if not key in e:
            keys.append(key)
            e[key] = []
            vars[key] = var
          e[key].append(result['evals'][i])
  f1.close()
  f2.close()
  for omega in range(1,2*n_max+1,2):
    for parity in range(2):
      r = r + ("#----------------------------------- "+states.describe_omega_parity(omega,parity)+" -----------------------------------\n")
      for key in keys:
        if key[0]!=omega or key[1]!=parity:
          continue
        i = key[2]
        s = list_to_r_code(e[key])
        e_lo = min(e_lo,min(e[key]))
        e_hi = max(e_hi,max(e[key]))
        r = r + (vars[key]+" <- "+s+" # "+states.describe_omega_parity(omega,parity)+" "+str(i)+"\n")
  e_hi = min(1.5+pars['n_max_scale'],e_hi)
  if 'e_lo' in pars:
    e_lo = pars['e_lo']
  if 'e_hi' in pars:
    e_hi = pars['e_hi']
  title = "kappa="+str(pars['kappa'])+" mu="+str(pars['mu'])
  subtitle = "https://github.com/tmprajwal/nilsson"
  opt = ',type="n",xlab="delta",ylab="E (hbar*omega)",main="'+title+'",sub="'+subtitle+'"'
  r = r + 'plot('+list_to_r_code([delta_lo,delta_hi])+','+list_to_r_code([e_lo,e_hi])+opt+')'+"\n"
  for key in vars:
    parity = key[1]
    if parity==0:
      opt = ''
    else:
      opt = ',lty="44"'
    r = r+("lines(delta,"+vars[key]+opt+")"+"\n")
  r = r+"garbage <- dev.off()\n"
  return r


def list_to_r_code(a):
  s = ",".join("%7.4f" % x for x in a)
  return "c("+s+")"

main()
